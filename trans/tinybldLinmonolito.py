#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Fri Jan  2 12:17:30 2009 from "/home/fjv/Python/TinyBldLin/src/TinyBldLin.wxg"

import wx, ConfigParser, os, serial

# begin wxGlade: extracode
# end wxGlade
RESET_RTS=False

class MainFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MainFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.Tabs = wx.Notebook(self, -1, style=0)
        self.terminal_tab = wx.Panel(self.Tabs, -1)
        self.messages_tab = wx.Panel(self.Tabs, -1)
        self.sizer_3_staticbox = wx.StaticBox(self, -1, "Comm")
        self.sizer_8_staticbox = wx.StaticBox(self.terminal_tab, -1, "")
        self.sizer_4_staticbox = wx.StaticBox(self.terminal_tab, -1, "")
        self.sizer_5_staticbox = wx.StaticBox(self.terminal_tab, -1, "")
        self.sizer_6_staticbox = wx.StaticBox(self.terminal_tab, -1, "")
        self.sizer_2_staticbox = wx.StaticBox(self, -1, "")
        self.combo_box_hex = wx.ComboBox(self, -1, choices=[], style=wx.CB_DROPDOWN)
        self.browsebutton = wx.Button(self, -1, "&Browse")
        self.writeflashbutton = wx.Button(self, -1, "&Write Flash")
        self.checkpicbutton = wx.Button(self, -1, "&CheckPic")
        self.abortsearchbutton = wx.Button(self, -1, "Abort Search")
        self.main_gauge = wx.Gauge(self, -1, 100, style=wx.GA_HORIZONTAL|wx.GA_SMOOTH)
        self.combo_box_speed = wx.ComboBox(self, -1, choices=["115200", "57600", "38400", "19200", "9600"], style=wx.CB_DROPDOWN)
        self.searchportbutton = wx.Button(self, -1, "Search")
        self.port = wx.TextCtrl(self, -1, "")
        self.list_ports = wx.ListBox(self, -1, choices=[], style=wx.LB_SINGLE)
        self.messages = wx.TextCtrl(self.messages_tab, -1, "Interface to TinyBootLoader, v1.9.8\ncontact: claudiu.chiculita@ugal.ro\nhttp://www.etc.ugal.ro/cchiculita/software/picbootloader.htm\n--------------------------------------------------------------------------------------------------", style=wx.TE_MULTILINE)
        self.openterminalbutton = wx.Button(self.terminal_tab, -1, "&Open")
        self.closeterminalbutton = wx.Button(self.terminal_tab, -1, "&Close")
        self.combo_box_speed_terminal = wx.ComboBox(self.terminal_tab, -1, choices=["115200", "57600", "38400", "19200", "9600"], style=wx.CB_DROPDOWN)
        self.clearterminalbutton = wx.Button(self.terminal_tab, -1, "&Clear")
        self.label_1_copy = wx.StaticText(self.terminal_tab, -1, "Tx ")
        self.combo_box_tx_type = wx.ComboBox(self.terminal_tab, -1, choices=["Char", "Char\\", "Mix2", "Nr", "Type", "TypEcho", "aTinyFile"], style=wx.CB_DROPDOWN)
        self.combo_box_tx_data = wx.ComboBox(self.terminal_tab, -1, choices=[], style=wx.CB_DROPDOWN)
        self.sendataterminalbutton = wx.Button(self.terminal_tab, -1, "Send")
        self.button_12 = wx.Button(self.terminal_tab, -1, "&1")
        self.button_13 = wx.Button(self.terminal_tab, -1, "&2")
        self.button_14 = wx.Button(self.terminal_tab, -1, "&3")
        self.label_1 = wx.StaticText(self.terminal_tab, -1, "Rx ")
        self.combo_box_rx_type = wx.ComboBox(self.terminal_tab, -1, choices=["Char", "Hex", "Nr", "Gra1", "Gra2"], style=wx.CB_DROPDOWN)
        self.combo_box_terminal_log = wx.ComboBox(self.terminal_tab, -1, choices=["dump.bin"], style=wx.CB_DROPDOWN)
        self.button_15 = wx.Button(self.terminal_tab, -1, "&B")
        self.button_16 = wx.Button(self.terminal_tab, -1, "&H")
        self.button_17 = wx.Button(self.terminal_tab, -1, "&R")
        self.terminal = wx.TextCtrl(self.terminal_tab, -1, "", style=wx.TE_PROCESS_ENTER|wx.TE_MULTILINE|wx.HSCROLL)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.browsefile, self.browsebutton)
        self.Bind(wx.EVT_BUTTON, self.writeflash, self.writeflashbutton)
        self.Bind(wx.EVT_BUTTON, self.checkpic, self.checkpicbutton)
        self.Bind(wx.EVT_BUTTON, self.abortsearch, self.abortsearchbutton)
        self.Bind(wx.EVT_BUTTON, self.searchport, self.searchportbutton)
        self.Bind(wx.EVT_LISTBOX_DCLICK, self.listboxdclick, self.list_ports)
        self.Bind(wx.EVT_BUTTON, self.openterminal, self.openterminalbutton)
        self.Bind(wx.EVT_BUTTON, self.closeterminal, self.closeterminalbutton)
        self.Bind(wx.EVT_BUTTON, self.clearterminal, self.clearterminalbutton)
        self.Bind(wx.EVT_BUTTON, self.sendataterminal, self.sendataterminalbutton)
        self.Bind(wx.EVT_BUTTON, self.ononebutton, self.button_12)
        self.Bind(wx.EVT_BUTTON, self.ontwobutton, self.button_13)
        self.Bind(wx.EVT_BUTTON, self.onthreebutton, self.button_14)
        self.Bind(wx.EVT_BUTTON, self.onbbutton, self.button_15)
        self.Bind(wx.EVT_BUTTON, self.onhbutton, self.button_16)
        self.Bind(wx.EVT_BUTTON, self.onrbutton, self.button_17)
        self.Bind(wx.EVT_TEXT_ENTER, self.ontextenterterminal, self.terminal)
        self.Bind(wx.EVT_TEXT, self.oncharterminal, self.terminal)
        # end wxGlade
        self.Bind(wx.EVT_CLOSE, self.onclosebutton) 

    def __set_properties(self):
        # begin wxGlade: MainFrame.__set_properties
        self.SetTitle("WxPython Tiny Pic Bootloader")
        _icon = wx.EmptyIcon()
        _icon.CopyFromBitmap(wx.Bitmap("/usr/share/tinybldLin/_tinybldLin/images/blue.ico", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.SetSize((728, 411))
        self.SetFont(wx.Font(9, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.abortsearchbutton.SetMinSize((90, 30))
        self.abortsearchbutton.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.abortsearchbutton.Hide()
        self.main_gauge.SetMinSize(wx.DLG_SZE(self.main_gauge, (45, 8)))
        self.combo_box_speed.SetMinSize(wx.DLG_SZE(self.combo_box_speed, (45, 13)))
        self.combo_box_speed.SetSelection(0)
        self.port.SetFont(wx.Font(9, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.list_ports.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.list_ports.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.messages.SetFont(wx.Font(9, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
        self.openterminalbutton.SetMinSize(wx.DLG_SZE(self.openterminalbutton, (41, 13)))
        self.closeterminalbutton.SetMinSize(wx.DLG_SZE(self.closeterminalbutton, (35, 13)))
        self.closeterminalbutton.Enable(False)
        self.combo_box_speed_terminal.SetMinSize(wx.DLG_SZE(self.combo_box_speed_terminal, (44, 13)))
        self.combo_box_speed_terminal.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.combo_box_speed_terminal.SetSelection(0)
        self.clearterminalbutton.SetMinSize(wx.DLG_SZE(self.clearterminalbutton, (35, 13)))
        self.label_1_copy.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.combo_box_tx_type.SetMinSize(wx.DLG_SZE(self.combo_box_tx_type, (38, 13)))
        self.combo_box_tx_type.SetSelection(1)
        self.combo_box_tx_data.SetMinSize(wx.DLG_SZE(self.combo_box_tx_data, (60, 13)))
        self.sendataterminalbutton.SetMinSize(wx.DLG_SZE(self.sendataterminalbutton, (30, 13)))
        self.button_12.SetMinSize(wx.DLG_SZE(self.button_12, (10, 16)))
        self.button_13.SetMinSize(wx.DLG_SZE(self.button_13, (10, 16)))
        self.button_14.SetMinSize(wx.DLG_SZE(self.button_14, (10, 16)))
        self.label_1.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
        self.combo_box_rx_type.SetMinSize(wx.DLG_SZE(self.combo_box_rx_type, (38, 13)))
        self.combo_box_rx_type.SetSelection(0)
        self.combo_box_terminal_log.SetMinSize(wx.DLG_SZE(self.combo_box_terminal_log, (45, 13)))
        self.combo_box_terminal_log.SetSelection(0)
        self.button_15.SetMinSize(wx.DLG_SZE(self.button_15, (11, 13)))
        self.button_16.SetMinSize(wx.DLG_SZE(self.button_16, (11, 13)))
        self.button_17.SetMinSize(wx.DLG_SZE(self.button_17, (11, 13)))
        self.button_17.Enable(False)
        self.terminal.Enable(False)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MainFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_1 = wx.FlexGridSizer(2, 1, 0, 0)
        grid_sizer_3 = wx.FlexGridSizer(1, 2, 0, 0)
        grid_sizer_8 = wx.FlexGridSizer(2, 1, 0, 0)
        sizer_6 = wx.StaticBoxSizer(self.sizer_6_staticbox, wx.HORIZONTAL)
        grid_sizer_14 = wx.FlexGridSizer(1, 1, 0, 0)
        grid_sizer_9 = wx.FlexGridSizer(1, 2, 0, 0)
        grid_sizer_11 = wx.FlexGridSizer(2, 1, 0, 0)
        sizer_5 = wx.StaticBoxSizer(self.sizer_5_staticbox, wx.HORIZONTAL)
        grid_sizer_13 = wx.FlexGridSizer(1, 8, 0, 0)
        sizer_4 = wx.StaticBoxSizer(self.sizer_4_staticbox, wx.HORIZONTAL)
        grid_sizer_12 = wx.FlexGridSizer(1, 8, 0, 0)
        grid_sizer_17 = wx.FlexGridSizer(1, 1, 0, 0)
        sizer_8 = wx.StaticBoxSizer(self.sizer_8_staticbox, wx.HORIZONTAL)
        grid_sizer_18 = wx.FlexGridSizer(2, 4, 5, 5)
        grid_sizer_4 = wx.FlexGridSizer(1, 1, 0, 0)
        grid_sizer_5 = wx.FlexGridSizer(2, 1, 0, 0)
        sizer_3 = wx.StaticBoxSizer(self.sizer_3_staticbox, wx.HORIZONTAL)
        grid_sizer_7 = wx.FlexGridSizer(4, 1, 0, 0)
        sizer_2 = wx.StaticBoxSizer(self.sizer_2_staticbox, wx.HORIZONTAL)
        grid_sizer_6 = wx.FlexGridSizer(4, 1, 0, 0)
        grid_sizer_2 = wx.FlexGridSizer(1, 2, 0, 0)
        grid_sizer_2.Add(self.combo_box_hex, 0, wx.EXPAND, 0)
        grid_sizer_2.Add(self.browsebutton, 0, 0, 0)
        grid_sizer_2.AddGrowableCol(0)
        grid_sizer_1.Add(grid_sizer_2, 1, wx.EXPAND, 0)
        grid_sizer_6.Add(self.writeflashbutton, 0, 0, 0)
        grid_sizer_6.Add(self.checkpicbutton, 0, 0, 0)
        grid_sizer_6.Add(self.abortsearchbutton, 0, wx.SHAPED, 0)
        grid_sizer_6.Add((90, 30), 0, 0, 0)
        grid_sizer_6.Add(self.main_gauge, 0, 0, 0)
        sizer_2.Add(grid_sizer_6, 1, wx.EXPAND, 0)
        grid_sizer_5.Add(sizer_2, 1, wx.EXPAND, 0)
        grid_sizer_7.Add(self.combo_box_speed, 0, 0, 0)
        grid_sizer_7.Add(self.searchportbutton, 0, wx.SHAPED, 0)
        grid_sizer_7.Add(self.port, 0, wx.EXPAND, 0)
        grid_sizer_7.Add(self.list_ports, 0, wx.EXPAND, 0)
        grid_sizer_7.AddGrowableRow(3)
        sizer_3.Add(grid_sizer_7, 1, wx.EXPAND, 0)
        grid_sizer_5.Add(sizer_3, 1, wx.EXPAND, 0)
        grid_sizer_5.AddGrowableRow(1)
        grid_sizer_3.Add(grid_sizer_5, 1, wx.EXPAND, 0)
        grid_sizer_4.Add(self.messages, 0, wx.EXPAND, 0)
        self.messages_tab.SetSizer(grid_sizer_4)
        grid_sizer_4.AddGrowableRow(0)
        grid_sizer_4.AddGrowableCol(0)
        grid_sizer_18.Add((5, 20), 0, wx.EXPAND, 0)
        grid_sizer_18.Add(self.openterminalbutton, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_18.Add(self.closeterminalbutton, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_18.Add((5, 20), 0, wx.EXPAND, 0)
        grid_sizer_18.Add((5, 20), 0, wx.EXPAND, 0)
        grid_sizer_18.Add(self.combo_box_speed_terminal, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_18.Add(self.clearterminalbutton, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_18.Add((5, 20), 0, wx.EXPAND, 0)
        grid_sizer_18.AddGrowableRow(0)
        grid_sizer_18.AddGrowableRow(1)
        sizer_8.Add(grid_sizer_18, 1, wx.EXPAND, 0)
        grid_sizer_17.Add(sizer_8, 1, wx.EXPAND, 0)
        grid_sizer_17.AddGrowableRow(0)
        grid_sizer_17.AddGrowableCol(0)
        grid_sizer_9.Add(grid_sizer_17, 1, wx.EXPAND, 0)
        grid_sizer_12.Add(self.label_1_copy, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_12.Add(self.combo_box_tx_type, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_12.Add(self.combo_box_tx_data, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_12.Add(self.sendataterminalbutton, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_12.Add(self.button_12, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_12.Add(self.button_13, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_12.Add(self.button_14, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_12.AddGrowableCol(2)
        sizer_4.Add(grid_sizer_12, 1, wx.EXPAND, 0)
        grid_sizer_11.Add(sizer_4, 1, wx.EXPAND, 0)
        grid_sizer_13.Add(self.label_1, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_13.Add(self.combo_box_rx_type, 0, 0, 0)
        grid_sizer_13.Add(self.combo_box_terminal_log, 0, 0, 0)
        grid_sizer_13.Add(self.button_15, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_13.Add(self.button_16, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_13.Add((20, 14), 0, wx.EXPAND, 0)
        grid_sizer_13.Add(self.button_17, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_13.Add((20, 14), 0, wx.EXPAND, 0)
        grid_sizer_13.AddGrowableCol(7)
        sizer_5.Add(grid_sizer_13, 1, wx.EXPAND, 0)
        grid_sizer_11.Add(sizer_5, 1, wx.EXPAND, 0)
        grid_sizer_11.AddGrowableRow(0)
        grid_sizer_11.AddGrowableRow(1)
        grid_sizer_11.AddGrowableCol(0)
        grid_sizer_9.Add(grid_sizer_11, 1, wx.EXPAND, 0)
        grid_sizer_9.AddGrowableRow(0)
        grid_sizer_9.AddGrowableCol(1)
        grid_sizer_8.Add(grid_sizer_9, 1, wx.EXPAND, 0)
        grid_sizer_14.Add(self.terminal, 0, wx.EXPAND, 0)
        grid_sizer_14.AddGrowableRow(0)
        grid_sizer_14.AddGrowableCol(0)
        sizer_6.Add(grid_sizer_14, 1, wx.EXPAND, 0)
        grid_sizer_8.Add(sizer_6, 1, wx.EXPAND, 0)
        self.terminal_tab.SetSizer(grid_sizer_8)
        grid_sizer_8.AddGrowableRow(1)
        grid_sizer_8.AddGrowableCol(0)
        self.Tabs.AddPage(self.messages_tab, "Messages")
        self.Tabs.AddPage(self.terminal_tab, "Terminal")
        grid_sizer_3.Add(self.Tabs, 1, wx.EXPAND, 0)
        grid_sizer_3.AddGrowableRow(0)
        grid_sizer_3.AddGrowableCol(1)
        grid_sizer_1.Add(grid_sizer_3, 1, wx.EXPAND, 0)
        grid_sizer_1.AddGrowableRow(1)
        grid_sizer_1.AddGrowableCol(0)
        sizer_1.Add(grid_sizer_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        self.Centre()
        # end wxGlade
        self.want_abort=0
        self.gaugecounter=0


    def browsefile(self, event): # wxGlade: MainFrame.<event_handler>
        #Get the Saved path
        try:      
            dirname=GetRestoreSettings('FILES','hexfilepath')
        except:
            dirname=os.getcwd()
        
        #Setting File dialog
        filechooser = wx.FileDialog(self, "Select File:", dirname, "",
                               "Hex files (*.hex)|*.hex|Any (*.*)|*.*", wx.FD_CHANGE_DIR)         
        #Wait until user select a .hex file
        option = filechooser.ShowModal()
        #Acordig to the option
        if option == wx.ID_OK:
            #If OK has been pushed retrieve the path
            hexfile = filechooser.GetPath()
            #change combobox value to current Hex file
            self.combo_box_hex.SetValue(hexfile)
        else: 
          print "Cancel..."
        #get courrent directory to save it on config file
        global HexFilePath
        HexFilePath=filechooser.GetDirectory()

    def writeflash(self, event): # wxGlade: MainFrame.<event_handler>
        PORT=self.port.GetValue()
        BAUD=int(self.combo_box_speed.GetValue())
        filename=self.combo_box_hex.GetValue()
        self.abortsearchbutton.Show()
        TransferFile(PORT,BAUD,filename)
        self.abortsearchbutton.Hide()
        return

    def checkpic(self, event): # wxGlade: MainFrame.<event_handler>
        PORT=self.port.GetValue()
        BAUD=int(self.combo_box_speed.GetValue())
        self.abortsearchbutton.Show()
        DetectPic(PORT,BAUD)
        self.abortsearchbutton.Hide()
        return

    def abortsearch(self, event): # wxGlade: MainFrame.<event_handler>
        self.want_abort=1
        return

    def searchport(self, event): # wxGlade: MainFrame.<event_handler>
        SearchSerial()

    def listboxdclick(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `listboxdclick' not implemented!"
        event.Skip()

    def openterminal(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `openterminal' not implemented!"
        event.Skip()

    def closeterminal(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `closeterminal' not implemented!"
        event.Skip()

    def clearterminal(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `clearterminal' not implemented!"
        event.Skip()

    def sendataterminal(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `sendataterminal' not implemented!"
        event.Skip()

    def ononebutton(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `ononebutton' not implemented!"
        event.Skip()

    def ontwobutton(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `ontwobutton' not implemented!"
        event.Skip()

    def onthreebutton(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `onthreebutton' not implemented!"
        event.Skip()

    def onbbutton(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `onbbutton' not implemented!"
        event.Skip()

    def onhbutton(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `onhbutton' not implemented!"
        event.Skip()

    def onrbutton(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `onrbutton' not implemented!"
        event.Skip()

    def ontextenterterminal(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `ontextenterterminal' not implemented!"
        event.Skip()

    def oncharterminal(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `oncharterminal' not implemented!"
        event.Skip()
        
    def onclosebutton(self,event):
        #seving Settings
        try:        
            SaveSettings('FILES','HexFile',self.combo_box_hex.GetValue())
            SaveSettings('PIC','COMport',self.port.GetValue())
            SaveSettings('PIC',"COMspeed",self.combo_box_speed.GetValue())
            Width,Height=self.GetSize()
            SaveSettings('WINDOW',"Width",Width)
            SaveSettings('WINDOW',"Height",Height)
            Top,Left=self.GetPosition()
            SaveSettings('WINDOW',"Top",Top)
            SaveSettings('WINDOW',"Left",Left)
            SaveSettings('FILES','HexFilePath',HexFilePath)

        except:
            print 'there was an error savig settings'
        self.Destroy()
        
    def oninit(self):
        
        #Getting Saved and restoring Values
        Top=int(GetRestoreSettings('WINDOW','top'))
        Left=int(GetRestoreSettings('WINDOW','left'))
        self.SetPosition((Top,Left))
        
        Height=int(GetRestoreSettings('WINDOW','height'))
        Width=int(GetRestoreSettings('WINDOW','width'))
        self.SetSize((Width,Height))
        
        HexFile=GetRestoreSettings('FILES','hexfile')
        self.combo_box_hex.SetValue(HexFile)
        
        COMspeed=GetRestoreSettings('PIC','comspeed')
        self.combo_box_speed.SetValue(COMspeed)
        
        COMport=GetRestoreSettings('PIC','comport')
        self.port.SetValue(COMport)

        #restoring Value
                
        
        return
        

# end of class MainFrame

def twrite(data):   
    WxTbl.messages.AppendText(data)
    return

def SaveSettings(SECTION,NAME,VALUE):
    
    cfg = ConfigParser.ConfigParser()  
    configfile = os.path.join(os.environ.get("HOME", "."), ".tinybldlin")
    sections=["FILES","PIC","WINDOW","OPTIONS","TERMINAL"]
    if not cfg.read(configfile):   
        print "No existe el archivo intentando crear uno nuevo"
        for disp in sections:
            try:
                cfg.add_section(disp) 
                f = open(configfile, "w")  
                cfg.write(f)  
                f.close() 
            except:
                pass
    else:
        try:      
            cfg.set(SECTION, NAME, VALUE) 
            f = open(configfile, "w")  
            cfg.write(f)  
            f.close()    
        except:   
            cfg.add_section(SECTION)
            cfg.set(SECTION, NAME, VALUE) 
            f = open(configfile, "w")  
            cfg.write(f)  
            f.close() 
    return

def GetRestoreSettings(SECTION,NAME):
    cfg = ConfigParser.ConfigParser()  
    configfile = os.path.join(os.environ.get("HOME", "."), ".tinybldlin")
    cfg.read(configfile)  
    VALUE= cfg.get(SECTION, NAME)  
    return VALUE

def SearchSerial():
    port_list=[]
    j=0  
    #TODO: recognzed other OS
       
    #test if the program can use any of this ports
    for i in ("dev/ttyS1","/dev/ttyS1","/dev/ttyS2","/dev/ttyS3","/dev/ttyS4","/dev/ttyUSB0","/dev/ttyUSB1","/dev/ttyUSB2","/dev/ttyUSB3","/dev/ttyUSB4"):     
        #TinyBldLin Will try to open the and send a string   
        try:
            j=j+1
            ser=serial.Serial(i,19200)
            ser.write("Ping")
            ser.close()
            #If TinyBldLin can open a port it will be placed in the port list
            port_list.append(i)
           
            print "Port " + i + "open"
        except:
            continue
    if port_list==[]:
            print 'no port detected'
            return
    #settin current port to first detected port
    WxTbl.port.SetValue(port_list[0])
    #Apending all ports to list port
    for disp in port_list:
        WxTbl.list_ports.Append(disp)   
    return

def DetectPic(PORT,BAUD):
    print 'detecting PIC'
    gaugecounter=100
    try:
        ser = serial.Serial(PORT,BAUD,timeout=0.1)
        ser.flushInput()
        #Ask for PIC IDE
        twrite("\nConnect to " + PORT + " at " + str(BAUD)+'\n Searching for PIC ...') 
        for i in range(0,33,1): 
            wx.Yield()
            if WxTbl.want_abort==1:
                WxTbl.want_abort=0
                WxTbl.main_gauge.SetValue(0)
                break
            ser.write(chr(0xC1))
             #wait for PIC answer
            ret=ser.read(2)
            if len(ret)==2:
                break
            WxTbl.main_gauge.SetValue(gaugecounter)
            gaugecounter=gaugecounter-3
            WxTbl.main_gauge.Update()   
        WxTbl.main_gauge.SetValue(0)
    except:
        twrite("\n Could not connect to " + PORT + " at " + str(BAUD) + '\n ERROR!')
        return None,None
    #In case there was no answer
    if len(ret)!=2:
        twrite('Not found, \n ERROR!')
        ser.close
        return None,None
    #Leer el tipo de pic retornado por la tarjeta
    if ret[1]!= "K":
        twrite("\n Error, PIC not recognized (protocol error)\n")
        ser.close()
        return None,None   
    pt=ord(ret[0])
    ser.flushInput()
    ser.close()
    if pt==0x31:
        PicType="16F 876A/877A";
        max_flash=0x2000;
    elif pt==0x32:
        PicType="16F 873A/874A";
        max_flash=0x1000;
    elif pt==0x33:
        PicType="16F 87/F88";
        max_flash=0x1000;
    elif pt==0x41:
        PicType="18F 252o/452o";
        max_flash=0x8000;
    elif pt==0x42:
        PicType="18F 242/442";
        max_flash=0x4000;
    elif pt==0x43:
        PicType="18F 258/458";
        max_flash=0x8000;
    elif pt==0x44:
        PicType="18F 248/448";
        max_flash=0x4000;
    elif pt==0x45:
        PicType="18F 1320/2320";
        max_flash=0x2000;
    elif pt==0x46:
        PicType="18F 1220/2220";
        max_flash=0x1000;
    elif pt==0x47:
        PicType="18F 4320";
        max_flash=0x2000;
    elif pt==0x48:
        PicType="18F 4220";
        max_flash=0x1000;
    elif pt==0x4A:
        PicType="18F 6720/8720";
        max_flash=0x20000;
    elif pt == 0x4B:
        PicType="18F 6620/8620"
        max_flash=0x10000
    elif pt ==0x4C:
        PicType="18F 6520/8520"
        max_flash=0x8000
    elif pt==0x4D:
        PicType="18F 8680";
        max_flash=0x10000;
    elif pt==0x4E:
        PicType="18F 2525/4525";
        max_flash=0xC000;
    elif pt==0x4F:
        PicType="18F 2620/4620";
        max_flash=0x10000;
    elif pt==0x55:
        PicType="18F 2550/4550";
        max_flash=0x8000;
    elif pt==0x56:
        PicType="18F 2455/4455";
        max_flash=0x6000;
    else:
        PicType="Microcontroller not supported or not detected";
        max_flash=None;

    family=None

    if (pt==0x31) or (pt==0x32):
        family="16F8XX"
    elif (pt==0x33):
        family="16F8X"
    elif (pt>0x40) and (pt<0x60):
        family="18F"
    twrite('\n Found:'+ PicType)
    return max_flash,family

def TransferFile(PORT,BAUDRATE,filename):
    global s,pic_mem_back_1,pic_mem_back_2,max_flash,family
    
    pic_mem={}
    pic_mem_back_1={}
    pic_mem_back_2={}
    max_flash,family=DetectPic(PORT,BAUDRATE)
    
    
    if max_flash==None:
        return None
    try:
        f=open(filename, 'r')
    except IOError:
        twrite("Can't open file:"+filename+"\n\n")
        return None
    hexfile=f.readlines()
    f.close()
    le=len(hexfile)
    gotofull=0
    courrent_adress=0

    for rec in hexfile:  
       
        if rec[0]==";":
            twrite("\n Hex File Generated by CCS C compiler why dont you try SDCC C compiler?\n")
            break
        
        # Check for the record begining
        if rec[0]!=":":
            twrite("Hex file not recognized:\nLine: "+str(act)+
                   " File: "+filename+"\n\n")
            f.close()
            return None
        
        # Read the register size
        rl=eval("0x"+rec[1:3])
            
        # Read the register address 
        di=eval("0x"+rec[3:7])
            
        # Read the register type
        rt=eval("0x"+rec[7:9])

        # Calculate checksum
        chs=rl+eval("0x"+rec[3:5])+eval("0x"+rec[5:7])+rt
       
        # Only use the data register
        if rt==0:           
              
            for i in range(9,9+2*rl,2):
                data=rec[i:i+2]
                
                # Calculate hex file checksum
                chs=chs+eval("0x"+data)

                # store data in pic_mem (it uses hex file address)
                # and move the first 4 address to the needed location
                if di<courrent_adress:
                    break
                
                if di < 0x08:
                    
                    if family=="16F8XX" or family=="16F8X":
                        pic_mem[di+2*max_flash-200]=eval("0x"+data)
                        
                    elif family=="18F":
                        pic_mem[di+max_flash-200]=eval("0x"+data)
                       
                if di>0x03:
                    pic_mem[di]=eval("0x"+data)

                di=di+1
                courrent_adress=di
            
                #Calculate hex file checksum
                chs=((-chs)&255)
                # TODO: Check the hex file checksum
    
    if family=="16F8XX":
        hblock=8 #Hex Block 8 bytes
        block=4  #PIC Block 4 instructions (8 memory positions)
        maxpos=max_flash-100+4
        minpos=4

    if family=="16F8X":
        #The pic 16F87 and 16F88 do erase the program memory in blocks
        #of 32 word blocks (64 bytes)
        
        hblock=64 #Hex Block 64 bytes
        block=32  #PIC Block 32 instructions (64 memory positions)
        
        maxpos=max_flash-100+4
        minpos=0
        
        pic_mem[0]=0x8A
        pic_mem[1]=0x15
        pic_mem[2]=0xA0
        pic_mem[3]=0x2F
        
           
    if family=="18F":
        # The blocks have to be written using a 64 bytes boundary
        # so the first 8 bytes (reserved by TinyPic) will be re writen
        # So we have to include a goto max_flash-200+8
        goto_add=((max_flash-200+8)/2)
        hh_goto=(goto_add/0x10000)&0x0F
        h_goto=(goto_add/0x100)&0xFF
        l_goto=goto_add&0xFF
        
        pic_mem[0]=l_goto
        pic_mem[1]=0xEF
        pic_mem[2]=h_goto
        pic_mem[3]=0xF0+hh_goto
        
        block=64
        hblock=64
        maxpos=max_flash-200+8
        minpos=0
        
    s=serial.Serial(PORT,BAUDRATE,timeout=1)
    #Beginung Hex data tranfer
    
    
    global interval
    interval=len(pic_mem)
    for pic_pos in range(minpos,maxpos,block):
               
        mem_block=[255]*hblock
        write_block=False
        for j in range(0,hblock):
                      
            #.hex file address is pic_address/2 for the 16F familly
            if (family=="16F8XX") or (family == "16F8X"):
                hex_pos=2*pic_pos+j
            elif family=="18F":
                hex_pos=pic_pos+j
            else :
                twrite("Error, family not suported:",family)
                return
            
            if pic_mem.has_key(hex_pos):
                mem_block[j]=pic_mem[hex_pos]
                write_block=True
                
        if write_block:
            
            ret=write_mem(pic_pos,mem_block,family)
            
            if ret!="K":
                return 
    
    s.close()  
    WxTbl.main_gauge.SetValue(0)  
    WxTbl.gaugecounter=0
    success=1
    twrite("\n WRITE OK at"+' time:'+' sec')

def write_mem(pic_pos,mem_block,family):
    
    try:   
        s.flushInput()
    except:
        s.open()
        s.flushInput()
    
    hm=(pic_pos/256)&255
    lm=(pic_pos&255)
    rl=len(mem_block)
    
    if (family=="16F8XX")or(family=="16F8X"):
        # Calculate checksum
        chs=hm+lm+rl
        s.write(chr(hm)+chr(lm)+chr(rl))
        for i in range(0,rl):
        
            # Calculate checksum
            chs=chs+mem_block[i]
            
            s.write(chr(mem_block[i]))
            
        chs=((-chs)&255)
        s.write(chr(chs))
        
    if family=="18F":
        write
        # Calculate checksum
        chs=hm+lm+rl
        # the pic receives 3 byte memory address
        # U TBLPTRH TBLPTRL
        # Todo: Check if U can be different to 0
        #           U TBLPTRH TBLPTRL
        s.write(chr(0)+chr(hm)+chr(lm)+chr(rl))
       
        for i in range(0,rl):
            # Calculate checksum
            chs=chs+mem_block[i]
            s.write(chr(mem_block[i]))
            wx.Yield()
            WxTbl.main_gauge.SetValue(100*WxTbl.gaugecounter/interval)
            WxTbl.gaugecounter=WxTbl.gaugecounter+1
            

        chs=((-chs)&255)
        s.write(chr(chs))
    
    ret=s.read(1)
    s.close()
    if ret!="K":
        twrite("Error writing to the memory position: "+
                    hex(pic_pos)+"\n\n")
    return ret

if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    WxTbl = MainFrame(None, -1, "")
    app.SetTopWindow(WxTbl)
    WxTbl.oninit()
    WxTbl.Show()
    app.MainLoop()
